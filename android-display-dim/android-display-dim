#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
_share="${_bin}/../share"
source \
  "${_lib}/libcrash-bash/crash-bash"

_root_requirements() {
  _check_cmd \
    "bbrightnessctl" \
    "bbrightnessctl"
  _check_cmd \
    "displayctl" \
    "displayctl"
}

# shellcheck disable=SC2034
_global_variables() {
  dim_date=""
  dim_mode=""
  color=""
  quiet=""
}

_root_dim() {
  local \
    _brightness \
    _bbrightnessctl_opts=() \
    _displayctl_opts=() \
    _status
  if [[ "${quiet}" != "y" ]]; then
    _bbrightnessctl_opts+=(
      -v
    )
    _displayctl_opts+=(
      -v
    )
  fi
  _brightness="$( \
    bbrightnessctl \
      "${_bbrightnessctl_opts[@]}" \
      -m \
        root \
      get || \
      true)"
  if [ 1 -le "${_brightness}" ] ; then
    _msg_info \
      "Current brightness: ${_brightness}"
    bbrightnessctl \
      "${_bbrightnessctl_opts[@]}" \
      -m \
        root \
      set \
        0 || \
      true
  elif [[ 0 == "${_brightness}" ]]; then
    _status="$( \
      display-status)"
    if [[ "${_status}" == "off" ]]; then
      _msg_info \
        "Display off, turning on"
      displayctl \
        "${_displayctl_opts[@]}" \
        set \
          status \
          'on'
      bbrightnessctl \
        "${_bbrightnessctl_opts[@]}" \
        -m \
          root \
        set \
          0 || \
        true
    fi || \
      true
  fi || \
    true
}

_android_display_dim() {
  local \
    _mode="${1}"
  "_${_mode}_dim"
}

_auto_detect_mode() {
  local \
    _os
  _os="$( \
    uname \
      -o)"
  if [[ "${_os}" == "Android" ]]; then
    _root_requirements
    echo \
      "root"
  elif [[ "${_os}" == "GNU/Linux" ]]; then
    _msg_error \
      "not implemented. something with xdotool needs to be written"
  fi
}

_set_overrides() {
  _set_override \
    "dim" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "dim" \
    "mode" \
    "$(_auto_detect_mode)"
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "                 Dim date:   $(_get "dim" "date")"
  _msg_info "                 Dim mode:   $(_get "dim" "mode")"
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true

Dim display

Usage:
  $(_get "app" "name")
    [options]
  options:
     -m <method>          Method to dim display status.
                          Default: $(_get "dim" "mode")
     -h                   This message.
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_globals
_global_variables
# shellcheck disable=SC2004
# shellcheck disable=SC2034
while \
  getopts \
    'm:cvh?' \
    arg; do
  case \
    "${arg}" in
    m) override_dim_mode="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
	 _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0 && \
    _set_overrides && \
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
_set_overrides
app_opts=(
  "$(_get \
       "dim" \
       "mode")"
)
_show_config
_android_display_dim \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
